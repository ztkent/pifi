<!DOCTYPE html>
<html>
<head>
    <title>PiFi Dashboard</title>
    <script src="https://unpkg.com/htmx.org@1.9.10"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }
        .bg {
            background-color:rgb(161, 160, 160);
            min-height: 100vh;
        }
        .container {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .status-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0px;
            margin: 20px;
        }
        .status-row.three-col {
            grid-template-columns: 1fr 1fr 1fr;
        }
        .nav-tabs {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            gap: 10px;
        }
        .nav-tab {
            padding: 10px 20px;
            background-color: #95a5a6;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        .nav-tab.active {
            background-color: #3498db;
        }
        .nav-tab:hover {
            background-color: #7f8c8d;
        }
        .nav-tab.active:hover {
            background-color: #2980b9;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .error-popup {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff4757;
            color: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        
        .error-popup.show {
            display: block;
            animation: slideIn 0.3s ease-out;
        }
        
        .close-btn {
            float: right;
            cursor: pointer;
            margin-left: 10px;
        }
        .success-popup {
            background: #2ecc71;
        }
        .error-popup {
            background: #ff4757;
        }
        .popup {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            color: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        .popup.show {
            display: block;
            animation: slideIn 0.3s ease-out;
        }
        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
    </style>
</head>
<body class="bg">
    <div id="error-popup" class="error-popup">
        <span class="close-btn" onclick="this.parentElement.classList.remove('show')">×</span>
        <span id="error-message"></span>
    </div>
    <div id="message-popup" class="popup">
        <span class="close-btn" onclick="this.parentElement.classList.remove('show')">×</span>
        <span id="message-text"></span>
    </div>

    <div class="nav-tabs">
        <button class="nav-tab active" onclick="switchTab('network-status')">Network Status</button>
        <button class="nav-tab" onclick="switchTab('environment')">Environment</button>
    </div>

    <div id="network-status" class="tab-content active">
        <div class="status-row">
            <div class="container"
                 hx-get="/status"
                 hx-trigger="load, every 10s"
                 hx-swap="innerHTML">
            </div>
            <div class="container"
                 hx-get="/network"
                 hx-trigger="load, networkupdate"
                 hx-swap="innerHTML">
            </div>
        </div>
    </div>

    <div id="environment" class="tab-content">
        <div class="container"
             hx-get="/environment"
             hx-trigger="load, envupdate"
             hx-swap="innerHTML">
        </div>
    </div>

    <script>
        function switchTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all nav tabs
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked nav tab
            event.target.classList.add('active');
        }

        document.body.addEventListener('htmx:responseError', function(evt) {
            const popup = document.getElementById('error-popup');
            const message = document.getElementById('error-message');
            message.textContent = evt.detail.error || 'An error occurred';
            popup.classList.add('show');
            setTimeout(() => popup.classList.remove('show'), 5000);
        });

        document.body.addEventListener('htmx:afterRequest', function(evt) {
            const popup = document.getElementById('message-popup');
            const message = document.getElementById('message-text');
            
            if (evt.detail.pathInfo.requestPath === '/add-network') {
                if (evt.detail.successful) {
                    showSuccessMessage('Network configuration saved');
                    htmx.trigger('.container[hx-get="/network"]', 'networkupdate');
                } 
            } else if (evt.detail.pathInfo.requestPath === '/remove-network') {
                if (evt.detail.successful) {
                    showSuccessMessage('Network deleted');
                    htmx.trigger('.container[hx-get="/network"]', 'networkupdate');
                } 
            } else if (evt.detail.pathInfo.requestPath === '/connect') {
                if (evt.detail.successful) {
                    showSuccessMessage('Network connected');
                    htmx.trigger('.container[hx-get="/network"]', 'networkupdate');
                } 
            } else if (evt.detail.pathInfo.requestPath === '/autoconnect-network') {
                if (evt.detail.successful) {
                    showSuccessMessage('Network autoconnection updated');
                    htmx.trigger('.container[hx-get="/network"]', 'networkupdate');
                } 
            } else if (evt.detail.pathInfo.requestPath === '/setmode') {
                if (evt.detail.successful) {
                    showSuccessMessage('Network mode updated');
                } 
            } else if (evt.detail.pathInfo.requestPath === '/env/set') {
                if (evt.detail.successful) {
                    showSuccessMessage('Environment variable set');
                    htmx.trigger('.container[hx-get="/environment"]', 'envupdate');
                    // Clear the form
                    document.querySelector('input[name="key"]').value = '';
                    document.querySelector('input[name="value"]').value = '';
                } 
            } else if (evt.detail.pathInfo.requestPath === '/env/unset') {
                if (evt.detail.successful) {
                    showSuccessMessage('Environment variable deleted');
                    htmx.trigger('.container[hx-get="/environment"]', 'envupdate');
                } 
            }
        });

        function showSuccessMessage(text) {
            const popup = document.getElementById('message-popup');
            const message = document.getElementById('message-text');
            popup.classList.add('success-popup');
            message.textContent = text;
            popup.classList.add('show');
            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.remove('success-popup', 'error-popup');
            }, 5000);
        }
    </script>
</body>
</html>